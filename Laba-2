Написать программу, которая читая символы из бесконечной последовательности (эмулируется конечным файлом, читающимся поблочно), распознает, преобразует и выводит на экран лексемы по определенному правилу. Лексемы разделены пробелами. 
Преобразование делать по возможности через словарь. Для упрощения под выводом числа прописью подразумевается последовательный вывод всех цифр числа. Нечетные двоичные числа, не превышающие 409610, в которых встречается не более одной серии из двух подряд идущих единиц. 
Выводит на экран цифры числа, исключая единицы. Отдельно выводится прописью номер позиции, с которой начинается эта серия.
Написать программу, решающую задачу из 1 лабораторной работы (в соответствии со своим вариантом) со следующими изменениями:
Входной файл является обыкновенным (т.е. нет требования на «бесконечность» файла);
Распознавание и обработку делать  через регулярные выражения;
В вариантах, где есть параметр (например К), допускается его заменить на любое число;
Все остальные требования соответствуют варианту задания лабораторной работы №1.

import re

d_db = {'0':'ноль', '1':'один'}

def process_binary_number(number):
    number_str = str(number)
    start_idx = 0
    for i in range(len(number_str) - 1):
        if number_str[i] == '1' and number_str[i + 1] == '1':
            start_idx = i
            break

    output = []
    for idx, d in enumerate(number_str):
        if d != '1':
            output.append(d_db[d])

    print('Число без единиц:', ' '.join(output))
    print(f'Позиция начала серии "11": {start_idx}')

file = open("122.txt", "r")
while True:
    a = file.readline().split()
    if not a:
        print ("\nФайл 122.txt в директории проекта закончился.")
        break
    for j in a:
        res = re.findall(r'[0-1]*[0-1]',j)
        if len(res) == 1:
            if len(j) == len(res[0]) and len(j) < 11:
                print (res)
    for val in a:
        if all('0' <= num_str <= '1' for num_str in val):
            print('Значение val', val)
            if int(val) % 2 == 1 and int(val) <= 4096:
                print(f'Обработка числа: {val}')
                process_binary_number(val)
                print('-' * 30)
            else:
                print(f'Не удовлетворяет условиям: {a}')
        else:
            print(f'Ошибка: Неверный формат числа')
